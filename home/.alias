#'alias' | grep "! /usr/bin/bash

unalias -a
alias al.="alias | grep \"'alias | grep\""
alias ,al.a='alias | grep'
alias cd.c="cd $HOME/code"
alias cd.w='cd $HOME/code/work'
alias cp='cp -i'
alias df='df -h -x aufs -x tmpfs -x udev'
alias du='du -h'
alias du.size='directory_by_size'
alias du.size.sorted='directory_by_size_sorted'
alias grep='grep --color'       # show differences in colour
alias jc="journalctl -n 100 -f"
alias jcu="jc -u"
alias la='ls -A'                              # all but . and ..
alias less='less -r'                          # raw control characters
alias lla='ls -alh'                              # long list
alias ll='ls -l'                              # long list
alias l='ls -CF'                              #
alias llt='ls -lt'
alias lnk='greplinks'
alias lt='ls -t'
alias mdcat="pandoc -f markdown -t plain"     # markdown
alias more='less'
alias mv='mv -i'
alias q='myquote'
alias randmd='find . -type f |grep -v .git | shuf -n 1'
alias rebash='exec $SHELL'
alias rm='rm -i'
alias standby='sudo /etc/acpi/sleep.sh'
alias sudid='sudo -E !!'
alias sudo='sudo -E'
alias swp='setxkbmap -option caps:swapescape'
alias sys='sudo systemctl'
alias torr='aria2c -u40K --seed-time=0'
alias whatismyip='dig +short myip.opendns.com @resolver1.opendns.com'
alias whence='type -a'                        # where, of a sort
if exists batcat; then alias c='batcat'; else alias c='cat'; fi

function curdate() { echo "$(date '+%y%m%d')" }
function curtime() { echo "$(date '+%H%M%S')" }
function exists() { command -v $1 >/dev/null 2>&1 }
function echolog() { 
  echo "\n###### $1" >&2
  if [[ -n $2 ]]; then 
    # replace all newlines with newline followed by 2 spaces then "- "
    local echomsg=$(echo "$2" | sed ':a;N;$!ba;s/\n/\n  /g')
    echo "  $echomsg\n" >&2
  fi
  echo "----------------" >&2
}

function ,dotfiles() { 
  local DOTFILES=$HOME/dotfiles
  if [[ -d $DOTFILES/.git ]]; then
    echolog "Updating dotfiles git repo"
    local curdir=$(pwd)
    cd $DOTFILES && git pull && unalias -a && source ~/.zshrc 
    cd $curdir 
  elif [[ -d $DOTFILES ]]; then
    echolog "Updating dotfiles (not a git repo)"
    if [[ ! -d $HOME/tmp ]]; then mkdir $HOME/tmp; fi
    local curdir=$(pwd)
    cd $HOME/tmp 
    wget https://github.com/arafatm/dotfiles/tarball/main -O - | tar -xz --one-top-level=dotfiles --strip-components=1;
    if [[ -d $DOTFILES ]]; then rm -rf $DOTFILES; mv $HOME/tmp/dotfiles $HOME; fi 
    unalias -a && source ~/.zshrc 
    cd $curdir
  fi
  for f in `ls -A $DOTFILES/home`; do rm -rf $HOME/$f && ln -s $DOTFILES/home/$f $HOME/; done
}
if exists zsh; then alias ,z="unalias -a; source $HOME/.zshrc"; fi

# From https://fam.tuwien.ac.at/~schamane/_/mycolorize
bgred=$(tput setab 1)
bgyel=$(tput setab 3)
bred=$(tput setaf 1)$(tput bold)
red=$(tput setaf 1)
red=$(tput setaf 1)
gre=$(tput setaf 2)
yel=$(tput setaf 3)
blu=$(tput setaf 4)
mag=$(tput setaf 5)
cya=$(tput setaf 6)
nor=$(tput sgr0) # reset colors
# tput setab for background
# tput bold

if exists ssh; then
  alias ,ssh.furahadev='ssh arafatm@dev.furahasoftware.com'
  alias ,ssh.kodi='ssh -oServerAliveInterval=60 kodi@192.168.1.2'
  alias ,ssh.proxy='ssh -oServerAliveInterval=60 -D 1234 arafatm@leanfolio.com'
fi

if grep -qi microsoft-standard-WSL2 /proc/version; then 
  alias expl='explorer.exe .' # windows WS
  alias ssh-add='ssh-add.exe' 
  alias ssh='ssh.exe'
  export GIT_SSH_COMMAND='ssh.exe'
fi

if [[ $OSTYPE =~ 'darwin' ]] then 
  alias brew='brew'
  alias cask='brew cask'
  alias ls='ls --color=tty'
  alias ,mac.camera='sudo killall VDCAssistant' # reset osx camera 
  alias ,pg.start='launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist'
  alias ,pg.stop='launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist'
  alias sed='gsed'
else 
  alias ls='ls --color=auto'
fi

if exists apt; then
  alias ,al.apt='alias | grep apt'
  alias apt.distupgrade='sudo apt dist-upgrade'
  alias apt.show='apt show'
  alias apt.install='sudo apt install'
  alias apt.madison='sudo apt-cache madison' # show available versions of a package
  alias apt.search='apt search'
  alias apt.update='sudo apt update'
fi

if exists nvim; then 
  alias :e='nvim'
  alias v='nvim -R'
  alias vi='nvim'
  alias vim='nvim'
else
  alias v='vi -R'
fi

if exists git; then
  alias al.g='alias |grep git'
  alias al.gr='alias | grep ggit_readme_'
  alias g.cdroot='cd `git rev-parse --show-toplevel`'
  alias g.vireadme='vim  $(git rev-parse --show-toplevel)/readme.md'
  alias ghub.clone='github_clone'

  alias g.diff='git diff HEAD .'
  alias g.diffshow='git diff HEAD^ HEAD'
  alias g.show='git show HEAD .'
  alias g.status='git status -s'

  alias g.addcommit='ggit_add_and_commit_all'
  alias g.brclean='git branch --merged main | grep -v "main" | xargs -n 1 git branch -d'
  alias g.br='git branch --color'
  alias g.brtrack='ggit_branch_and_track'
  alias g.checkout='git checkout'
  alias g.checkoutremote='ggit_checkout_remote'
  alias g.cleanhistory='ggit_clean_history'
  alias g.commitall='git commit -a'
  alias g.commitlastcommand='ggit_commit_last_command'
  alias g.commitwithdefaultmessage='ggit_commit'
  alias g.config='git config -l'
  alias g.configlocal='git config -l --local'
  alias g.fetchall='find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} pull origin main \;'
  alias g.lsfiles='git ls-files'
  alias g.log='git log --graph --decorate --pretty=oneline --abbrev-commit --all'
  alias g.logdecorate='git log --decorate'
  alias g.logshort='git log --reverse | grep -v "^commit" | grep -v "^Author" | grep -v "^Date" | grep -v -e "^$"'
  alias g.merge='git merge'
  alias g.mergemain='git merge main'
  alias g.note='ggit_note'
  alias g.statusdir="find . -type d -name .git -print -execdir git status --porcelain \;"
  alias g.sync='( git pull && git push ) &'
  alias g.tree='git log --oneline --decorate --all --graph'
  alias g.readmecommand='ggit_readme_append_command'
  alias g.readmediff='ggit_readme_append_diff'
  alias g.readmelink='ggit_readme_append_link'
  alias g.readmenote='ggit_readme_append_note'
fi

if exists postgres; then alias ,pg='sudo -u postgres psql'; fi

if exists asdf; then
  alias asdf.='alias | grep asdf'
  alias asdf.current='asdf current'
  alias asdf.global='asdf global'
  alias asdf.install='asdf install'
  alias asdf.listall='asdf list-all'
  alias asdf.list='asdf list'
  alias asdf.local='asdf local'
  alias asdf.plugin.add='asdf plugin add'
fi

if exists ruby; then
  alias bu.='alias |grep bundle'
  alias bu.rk.='alias |grep rake'
  alias bu.rl.='alias |grep rails'

  alias bu.exec='bundle exec'
  alias bu.init='bundle_init'
  alias bu.install='bundle install'
  alias bu.rk.='bundle exec rake'
  alias bu.rk.dbreload='bundle exec rake db:drop && rk db:create && rk db:schema:load && rk db:fixtures:load'
  alias bu.rk.fixtures='bundle exec rake db:fixtures:load'
  alias bu.rk.migrate='bundle exec rake db:migrate' 
  alias bu.rk.seed='bundle exec rake db:seed'
  alias bu.rk.test='bundle exec rake test'
  alias bu.rl.='bundle exec rails'
  alias bu.rl.console='bundle exec rails console'
  alias bu.rl.dbmigrate='bundle exec rails db:migrate'
  alias bu.rl.generate='bundle exec rails generate'
  alias bu.rl.generatecontroller='bundle exec rails generate controller'
  alias bu.rl.generatemodel='bundle exec rails generate model'
  alias bu.rl.generatescaffold='bundle exec rails generate --skip scaffold'
  alias bu.rl.server='bundle exec rails s -b 0.0.0.0'
  alias bu.rl.test='bundle exec rails test'
  alias bu.update='bundle update'
  function bundle_init() { bundle install --path vendor && bundle package && if [[ ! $(grep "vendor/ruby" .gitignore) ]]; then echo 'vendor/ruby' >> .gitignore; fi ; }
fi

#if exists python3; 
# then alias py='python3'
# alias pip='pip3'
# alias python='python3'
#fi

if exists terraform; then alias ,tf='terraform'; fi

if exists docker; then
  alias dk.='alias | grep docker'
  alias dk.updateimages='docker images | grep -v REPOSITORY | awk '{print $1}' | xargs -L1 docker pull'
  alias dk.composerestart='docker compose restart'
  alias dk.compose="docker-compose"
  alias dk.shell='docker_shell'
  function docker_shell() { docker exec -it $1 bash ; }
fi

if exists minikube; then
  alias mk.='alias | grep minikube'
  alias mk.addons.enable='minikube addons enable' # metrics-server
  alias mk.addons.list='minikube addons list'
  alias mk.addons.dashboard.enable='minikube addons enable dashboard'
  alias mk.dashboard='minikube dashboard'
  alias mk.delete='minikube delete' # "service hello-node" "deployment hello-node"
  alias mk.service='minikube service' # hello-node
  alias mk.start='minikube start'
  alias mk.status='minikube status'
  alias mk.stop='minikube stop'
fi
if exists kubectl; then
  alias kc.='alias | grep kubectl'
  alias kc.configview='kubectl config view'
  alias kc.creatdeployment='kubectl create deployment'
  alias kc.exposedeployment='kubectl expose deployment' # hello-node --type=LoadBalancer --port=8080
  alias kc.getdeployments='kubectl get deployments'
  alias kc.getevents='kubectl get events'
  alias kc.get='kubectl get'
  alias kc.getpods='kubectl get pods'
  alias kc.getpodsvc='kubectl get pod,svc -n' # kube-system
  alias kc.getservices='kubectl get services'
  alias kc.logs='kubectl logs'
  alias kc.toppods='kubectl top pods'
fi

if exists tmux; then
  alias tm.='alias | grep tmux'
  alias tm.a='tmux'
  alias tm.attach='tmux attach -t `basename $PWD` || tmux new -s `basename $PWD`'
  alias tm.list.session='tmux list-sessions'
  alias tm.new.main='tmux new-session -A -s main'
  alias tm.new.window='tmux new-window -c $PWD'
  alias tm.split.window='tmux split-window -c $PWD'
fi

function cleankernels() { echo $(dpkg --list | grep linux-image | awk '{ print $2 }' | sort -V | sed -n '/'`uname -r`'/q;p') $(dpkg --list | grep linux-headers | awk '{ print $2 }' | sort -V | sed -n '/'"$(uname -r | sed "s/\([0-9.-]*\)-\([^0-9]\+\)/\1/")"'/q;p') | xargs sudo apt-get -y purge ; }
function directory_by_size() { local arg1=${1:-.} && du -ahd 1 $arg1 ; }
function directory_by_size_sorted() { directory_by_size $1 | sort -h ; }
function em() { emacs $1 & ; }
function greplinks() {
  lnks="grep '\[\S.\+](' *.md"
  lnks="$links | sed -e 's/^.*\(\[\S.\+](.*)\)/\1/'"
  lnks="$links | sed -e 's/\(\[\S.\+]\)/$cya\1$nor/g'" 
  lnks="$links | sort"
  eval $lnks && echo -e $lnks
}

if exists git; then
  function github_clone() { echolog "Cloning git@github.com:$1"; git clone git@github.com:$1 ; }
  function herbr() {
    if [ -z "$1" ]; then echo "Please provide the name of the heroku app";
    else
      BRANCH=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
      echo "Deploying branch $BRANCH to $1" && read -p "Are you sure? " -n 1 -r
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        git pull && git merge origin/main && git push && git push heroku $BRANCH:main
        heroku pg:reset DATABASE_URL --confirm $1 && heroku run rake db:schema:load && heroku run rake db:seed
      fi
    fi
  }
  function ggit_note() {
    git commit --allow-empty --cleanup=whitespace -m "$*" && git push
  }
  function ggit_pages() {
    if [[ "$(basename $(pwd))" != "ghp" ]]; then
      git pull
      rm -rf ghp .gitmodules .git/modules .github
      wget https://github.com/arafatm/ghp/tarball/main -O - | tar -xz --one-top-level=ghp --strip-components=1 
      mkdir -p .github/workflows && cp ghp/.github/workflows/ghp.yml .github/workflows/ghp.yml
      ghpArr=( "Gemfile" "_config.yml" "_includes" "_layouts" "favicon.ico" )
      for item in ${ghpArr[@]}; do
        rm -rf $item
        cp -r ghp/$item .
        echolog "deleted and copied $item"
      done
      if [[ -n $(git status --short) ]]; then
        git add .
        git commit -am "Setting up Pages"
        git push
      fi
      echolog "Updated hash" "$(git rev-parse HEAD)"
      curl -L -X POST -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GH_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/repos/arafatm/$(basename $(pwd))/pages -d '{"source":{"branch":"main"}}'
    fi
  }
  function ggit_arafatm() {
    git init; git add . ; git commit -m "init"
    gh repo create $(basename $(pwd)) --source=. --remote=upstream --push --public
    sleep 5
    git branch -M main; git push -u origin main 
  }
  function ggit_add_and_commit_all() { git add . && git commit . -m "$*" && git push & ; }
  function ggit_branch_and_track() { git branch $1 && git push origin $1:$1 && git co $1 && git branch --set-upstream-to=origin/$1 $1 ; }
  function ggit_checkout_remote() { git checkout --track -b $1 origin/$1 ; }
  function ggit_clean_history() { 
    git checkout --orphan latest_branch
    git add -A
    git commit -am "init"
    git branch -D main
    git branch -m main
    git push -f origin main
  }

  function ggit_commit() {
    array=( $@ )
    len=${#array[@]}
    _file=${array[0]}
    _args=${array[@]:1:$len-1}
    git add $_file && git commit $_file -m "$_args"
  }

  function ggit_commit_last_command() { 
    last_command=$(history|tail -n 2|head -n 1|sed 's/ *[0-9]* *//') 
    git add . 
    git commit . -m "\$ $last_command" ; 
  }

  function ggit_parse_gh_url() {
    local loghead="ggit_parse_gh_url"
    local logmsg=""
    local repo=$(git config --get remote.origin.url)
    if [[ -z $repo ]]; then 
      logmsg="..No repo provided."
      repo="$(whoami)/$(basename `pwd`)"
    else
      logmsg="..Repo provided."
      repo=${repo%%.git} # strip .git from the end
      repo=${repo##*:} # strip everything before the colon
    fi
    repo="https://github.com/$repo"
    logmsg="${logmsg}\nReturning ${repo}"
    echolog $loghead $logmsg
    echo $repo
  }

  function ggit_readme_append_commit() {
    local url=$(git config --get remote.origin.url) && url=${url:15:-4} && url="https://github.com/$url"
    local commit=$(git log --oneline -n 1) && sha=${commit:0:7} && msg=${commit:8} && url="$url/commit/$sha"
    local msg="$* [$msg]($url)\n" && echolog "commit" "$msg"
    local gitroot=$(git rev-parse --show-toplevel) 
    sed -z -i "s^xxx^$msg\nxxx^" $gitroot/readme.md && git push &
  }

  function ggit_readme_append_link() {
    local msg="$*"
    if [[ -z $msg ]]; then 
         echolog "EXIT: No commit message" ; return 1
    else echolog "Committing with msg" "$msg" ; fi
    git add . && git commit . -m  $msg
    local gitroot=$(git rev-parse --show-toplevel)
    local commit=$(git log --oneline -n 1) 
    local sha=${commit:0:7} 
    local msg=${commit:8}
    local repo_url=$(ggit_parse_gh_url)
    msg="🚢 [${sha}](${repo_url}/commit/${sha})\n${msg}"
    echolog "appending to readme" "$msg"
    sed -z -i "s^xxx^${msg}\n\nxxx^" $gitroot/readme.md 
    git push 
  }

  # TODO
  function ggit_readme_append_diff() {
    local msg="$*"; 
    if [[ -z $msg ]]; then 
         echolog "EXIT: No commit message" && return 1
    else echolog "Committing with " "$msg"; fi
    git add . && git commit . -m  $msg 
    local gitdif=$(git diff HEAD^ HEAD) && echolog "gitdif" "$gitdif" 
    local gitroot=$(git rev-parse --show-toplevel)
    local repo_url=$(ggit_parse_gh_url)
    local commit=$(git log --oneline -n 1) 
    echolog "repo" "$repo_url"
    msg="🚢 [${commit:0:7}]($(ggit_parse_gh_url)/commit/${commit:0:7})\n${commit:8}"
    echolog "appending to readme" "$msg"
    sed -z -i "s^xxx^${msg}\nxxx^" $gitroot/readme.md 
    sed -z -i "s^xxx^\`\`\`diffxxx^" $gitroot/readme.md 
    while IFS= read -r line; do 
      local skip=false # skip lines that start with index, ---, +++, diff
      if [[ "$line" =~ "^index [0-9a-z]{7}\.\..*" ]]; then skip=true; fi
      if [[ "$line" =~ "^--- [ab/].*" ]]; then skip=true; fi
      if [[ "$line" =~ "^\+\+\+ [ab/].*" ]]; then skip=true; fi
      if [[ "$line" =~ "^diff --git a.*" ]]; then 
        sed -z -i "s^xxx^\nxxx^" $gitroot/readme.md
        line=$(echo "$line" | sed 's$\(diff --git a/.*\) b/.*$\1$'); 
      fi
      if [[ "$skip" = false ]]; then sed -z -i "s^xxx^$line\nxxx^" $gitroot/readme.md; fi
    done <<< "$gitdif"
    sed -z -i "s^xxx^\`\`\`\n\nxxx^" $gitroot/readme.md 
    git push
  }

  function ggit_readme_append_command() {
    local command_input="$*"
    #echolog "ggit_readme_append_last_command" $command_input
    local command_output=$(bash -c "$command_input" 2>&1)
    #echolog "command output" "$command_output"
    find . -mindepth 2 -type d -name .git -exec rm -rf {} \; # rails new automatically creates .git directory 
    git add . && git commit --allow-empty --cleanup=whitespace . -m "$command_input"
    local git_sha=$(git log --oneline -n 1 | cut -c1-7) #; echolog "git_sha" "git_sha: ${git_sha}"
    local repo=$(ggit_parse_gh_url) #; echolog "repo" "repo: ${repo}"
    local commit_msg=$(git log --oneline -n 1 | cut -c9-) #; echolog "commit_msg" "commit_msg: ${commit_msg}"
    local readme_msg="🚢 [${git_sha}](${repo}/commit/${git_sha})" #; echolog "commit sha" "$readme_msg"
    sed -z -i -e "s^xxx^${readme_msg}\nxxx^" $(git rev-parse --show-toplevel)/readme.md # append the commit message to the readme and push
    if [[ -n "$command_output" ]]; then
      readme_msg="\`\`\`bash\n${commit_msg}\n\`\`\`" #; echolog "readme_msg" "$readme_msg"
      sed -z -i -e "s^xxx^${readme_msg}\nxxx^" $(git rev-parse --show-toplevel)/readme.md # append the commit message to the readme and push
      sed -z -i -e "s^xxx^\`\`\`\nxxx^" $(git rev-parse --show-toplevel)/readme.md # append the commit message to the readme and push
      echolog "output" "$command_output"
      while IFS= read -r line; do 
        sed -z -i -e "s^xxx^  ${line}\nxxx^" $(git rev-parse --show-toplevel)/readme.md # append the commit message to the readme and push
      done <<< "$command_output"
      sed -z -i -e "s^xxx^\`\`\`\n\nxxx^" $(git rev-parse --show-toplevel)/readme.md # append the commit message to the readme and push
    else
      readme_msg="\`\`\`bash\n${commit_msg}\n\`\`\`" #; echolog "readme_msg" "$readme_msg"
      sed -z -i -e "s^xxx^${readme_msg}\n\nxxx^" $(git rev-parse --show-toplevel)/readme.md # append the commit message to the readme and push
    fi
    #git push
    #echo "====="
  }

  function ggit_readme_append_note() { 
    git add . 
    if [[ -n $* ]]; then git commit --allow-empty --cleanup=whitespace -m "💡 $*" 
    else git commit --allow-empty --cleanup=whitespace . 
    fi
    local repo=$(ggit_parse_gh_url) #; echolog "repo" "repo: ${repo}"
    local git_log=$(git log --oneline -n 1)
    local git_sha=$(echo $git_log | cut -c1-7) #; echolog "git_sha" "git_sha: ${git_sha}"
    local git_msg=$(echo $git_log | cut -c9-) #; echolog "git_msg" "git_msg: ${git_msg}"
    repo="${repo}/commit/${git_sha}" #; echolog "remote repo" "repo: ${repo}"
    git_msg="🚢 [${git_sha}](${repo})\n${git_msg}" #; echolog "readme msg" $git_msg
    sed -z -i -e "s^xxx^${git_msg}\n\nxxx^" $(git rev-parse --show-toplevel)/readme.md # append the commit message to the readme and push
    git push 
  }
fi

# vim: set ft=zsh:
# vim: set textwidth=0:
# vim: set wrapmargin=0:
# vim: set nowrap:
# vim: set foldlevel=9:
