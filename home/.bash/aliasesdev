#! /usr/bin/bash

alias whatismyip='dig +short myip.opendns.com @resolver1.opendns.com'

# postgres
alias pgsql='sudo -u postgres psql'

# furaha
alias furahadev='ssh arafatm@dev.furahasoftware.com'

# brew/cask
alias brew='brew'
alias cask='brew cask'

# Vendor everything still applies
alias b="bundle"
alias be="bundle exec"

alias bu="bundle update"
alias binit="bundle_init"

alias rk="bundle exec rake"
alias rkaliases="alias |grep ' rk'"
alias rkmigrate='rk db:migrate && rk db:migrate RAILS_ENV=test'
alias rkfixtures='rk db:fixtures:load'
alias rkdbreload='rk db:drop && rk db:create && rk db:schema:load && rk db:fixtures:load'
alias rkseed='rk db:seed'
alias rktest='rk test'

alias rl="bundle exec rails"
alias rlaliases="alias |grep ' rl'"
alias rlconsole='rl console'
alias rlcontroller='rl generate controller'
alias rlmodel='rl generate model'
alias rlscaffold='rl generate --skip scaffold'
alias rlserver='rl s -b 0.0.0.0'


# git shit
#if [ "$(expr substr $(uname -s) 1 13)" == "CYGWIN_NT-6.1" ]; then  
#fi 
alias rg='git_and_readme'
alias rgc='git_command_and_readme'
alias rgn='git_note_and_readme'
alias galiases='alias |grep git'
alias gaddcommit='git_add_and_commit_all'
alias gca='git_commit_all'
alias gcommitall='git commit -a'
alias gbranch='git branch --color'
alias gbranchclean='git branch --merged master | grep -v "master" | xargs -n 1 git branch -d'
alias gbranchtrack='git_branch_and_track'
alias gcheckout='git checkout'
alias gcheckoutremote='git_checkout_remote'
alias gcommitlastcommand='git_commit_last_command'
alias gcommitwithdefaultmessage='git_commit'
alias gfetchall='find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} pull origin master \;'
alias gdiff='git diff HEAD .'
alias gheroku='git pull; git push; git push heroku master'
alias ghubclone='github_clone'
alias glg='git log --oneline --decorate'
alias glog='git log --decorate'
alias glogall='git log --graph --decorate --pretty=oneline --abbrev-commit --all'
alias gloglist='git log --graph --decorate --pretty=oneline --abbrev-commit'
alias gls='git ls-files'
alias gmerge='git merge'
alias gmergemaster='git merge master'
alias gmkd='git log --reverse | grep -v "^commit" | grep -v "^Author" | grep -v "^Date"'
alias gnote='git commit --allow-empty --cleanup=whitespace'
alias gst='git status'
alias gsync='( git pull && git push ) &'
alias gtree='git log --oneline --decorate --all --graph'

# Vagrant
alias vag='vagrant'
alias vagd='time vag destroy -f'
alias vagp='time vag provision'
alias vagr='time vag reload'
alias vags='time vag ssh'
alias vagsc='time vag ssh -c'
alias vagu='time vag up'

bundle_init()
{
  bundle install --path vendor
  bundle package
  if [[ ! $(grep "vendor/ruby" .gitignore) ]]; then
    echo 'vendor/ruby' >> .gitignore
  fi
}

git_add_and_commit_all()
{
  git add . && git commit . -m "$*"
  git push &
}

readme_append_git_commit()
{
  url=$(git config --get remote.origin.url)
  url=${url:15:-4}
  url="https://github.com/$url"

  commit=$(git log --oneline -n 1) 
  sha=${commit:0:7}
  msg=${commit:8}
  
  url="$url/commit/$sha"

  msg="$msg [:ship: $sha]($url)"

  gitroot=$(git rev-parse --show-toplevel) && \
    gsed -i "s#xxx#$msg\n\nxxx#g" $gitroot/readme.md && \
    git commit -a -m "readme.md" && \
    git push &
}

# Git commit &&
# Replace "xxx" in readme.md with the git commit text 
git_and_readme()
{
  echo "commit and append to readme\n" & \
    git add .  && \
    git commit -a -m  "$*" && \
    readme_append_git_commit
}

# Git commit the last run command &&
# Replace "xxx" in readme.md with the git commit text 
git_command_and_readme()
{
  echo "commit last command and append to readme\n" && \
    lastcommand=$(history | tail -n 1 | sed 's/ *[0-9]* *//') && \
    git add .  && \
    git commit -a -m  "\`\$ $lastcommand\` \# $*" && \
    readme_append_git_commit
}

# Add git note && append to readme.md
git_note_and_readme()
{
  git commit --allow-empty --cleanup=whitespace -m "$*" && \
    readme_append_git_commit
}

git_commit_last_command()
{
  HIS=$(history|tail -n 2|head -n 1|sed 's/ *[0-9]* *//')
  git add . && git commit . -m "\$ $HIS"
  # ( git push ) &
}

git_commit_all()
{
  git add . && \
    git commit -a -m "$*"
}

git_commit()
{
  array=( $@ )
  len=${#array[@]}
  _file=${array[0]}
  _args=${array[@]:1:$len-1}
  echo "adding $_file"
  echo "commit msg $_args"

  git add $_file
  git commit $_file -m "$_args"
}

# rbenv/chruby 
if [ -d /usr/local/share/chruby ]; then
  source /usr/local/share/chruby/chruby.sh
  if [[ -f ./.ruby_version ]]; then
    chruby `cat ./.ruby_version`
  else
    chruby `chruby | head -n 1 | cut -c4-`
  fi
elif [ -d $HOME/.rbenv ]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

# heroku
if [ -d /usr/local/heroku ]; then
  export PATH="/usr/local/heroku/bin:$PATH" # Add Heroku Toolbelt
fi

# nvm/node/npm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

github_clone() {
  git clone git@github.com:$1
}

git_branch_and_track() {
  git branch $1
  git push origin $1:$1
  git co $1
  git branch --set-upstream-to=origin/$1 $1
}


git_checkout_remote() {
  git checkout --track -b $1 origin/$1
}

herbr() {
  if [ -z "$1" ]; then
    echo "Please provide the name of the heroku app"
  else
    BRANCH=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
    echo "Deploying branch $BRANCH to $1" 
    read -p "Are you sure? " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      git pull
      git merge origin/master
      git push
      git push heroku $BRANCH:master
      heroku pg:reset DATABASE_URL --confirm $1
      heroku run rake db:schema:load
      heroku run rake db:seed
    fi
  fi

}

em() {
  emacs $1 &
}

rdt() { # Echo a string into readme.md
  echo "" >> readme.md
  echo "$*" >> readme.md
}

rdc() { # Echo a string into readme.md as a code block
  echo "" >> readme.md
  echo -e "\`$*\`" >> readme.md
}

rdcl() { # Echo the last command into readme.md as a code block
  HIS=$(history|tail -n 2|head -n 1|sed 's/ *[0-9]* *//')
  echo "" >> readme.md
  echo -e "\`$HIS\`" >> readme.md
}
